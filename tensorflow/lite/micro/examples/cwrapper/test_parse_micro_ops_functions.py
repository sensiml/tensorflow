import pytest
from parse_micro_ops_functions import fill_template_file, parse_model_file


def test_model_binary():
    # Use a model binary directly
    model_binary = "1800000054464c3300000e001800040008000c00100014000e00000003000000100a0000b8050000a0050000040000000b000000900500007c05000024050000d4040000c400000074000000240000001c000000140000000c0000000400000054f6ffff58f6ffff5cf6ffff60f6ffffc2faffff04000000400000007c19a73e9981b93e568b9f3e88d812bf7410563efec6dfbef2105abef0e20abe105a98beb936ce3d8f7f873e2cb1fdbde6a68abea53eda3e5034edbd909169be0efbffff0400000040000000674148bf24cda0beb7920cbf0000000098fe3c3f000000000000000000000000000000004a179abe41cbb6be000000000000000013d61e3e00000000000000005afbffff04000000000400004b98ddbd406bcbbe360cd43cbd44b53e9570e33ee7ac863e00c44e3d7ea61d3ebd87bb3eb4b809bfa11ff8be8d90dd3edefa6fbeb275e43d6efe363e2018c2be39c7fbbefea430bef791debedeab243efbbbce3eeb2380be7b5873be9a2e033e1042a9bc101264bde38d0c3d9e4897be3451d4be023b0d3e626789be74dfa23df325b3beef347b3d6170e33dba76c0be7de9a73ec3abd0becf7cdbbe70279abe98f53cbdff4b4b3e7ea0f8bdd46e863d004a073a4c2461be5468f7bd023f77be2379b33e1c83adbdc8928d3ea8f315bde64d6c3dace798be81ecbd3ee255733ec177c73e6e1b5e3d2778023fd421903d52dc1f3ebfda883e8079e3bd406f10be20432ebdf076c5bdcca004bef069d7beb1fe64be204184beb2c326bed8f409be6444d13dd5e1c8be35bc3fbec094823ddc2bb1bd02dbbfbea57f8a3e21b4a23ecd8656bf9c3b76bc856d60bf86003cbec1237e3e96cd3f3e86912d3e55ef873e7e9703be2acd013e32c98ebe72773bbee0a1bcbe8db7a73e1c0595bef71fbb3ec93ed63e8042e9bd270cd2be5c3234be14cbcabddd3a67be1cbb8dbe91ac5cbe52406fbed771943e187109be9b29d9be7d66d2be98d6b2be00c9843abcdac2bd1dc21bbfd4dd923e07876cbe40c23bbebde29c3e0ab5a0bee2d59cbe3ebb7c3e17b4cf3ed58ec8be7cf95c3e80fc0d3dc5d58b3ef517a23ec76089beec95873d7ac25dbf7794983e773907bc4229003eafd0a93e3123c4be95365bbec7dc83be1e6b473e5b24993e9927543ec820ddbd5a862f3e80f069be44fc84bd82a02abe87e62a3ed834ae3d50bdb53ec48c88bee3bca53ea9da9e3e3eb823be8090153d973fc33eca5c9d3e21e8e13ec04901bc000b88bd3ff7ca3cfb5ab13e60d20d3cce2378bf8f4fb9be696a34bf4b5ea93e648cd93e5277363eebafbe3e40be363c08653bbd55e066bdd2e89bbe86e309be933ddd3e0f66183f180533bdde15d7beaacf49bea2a5643ee69c42be5442cc3da0bd9dbec269483e5b8ba2bec013873d36fd693e058640be1e7acebe4613a7be685286be049e86bd8c54c13de03bad3c426785bdea97423e6e133bbf565b163eaaabdf3ec841363d242d47be77a5ae3ec0c25b3cacac4e3e99ec13bef2ab733eaaa148bee8d301be60b7c7bd6472d33d83d3993e0c7634be42da0d3efb479a3e8bdc92be567f6b3e04d488bd119e803e3c89ff3db33e883ef7f0883e28fbc9be533ecf3eac75dcbeddcad73e0158a73e29b813bf768112bc288b16bf0eec0e3e400adbbd98ecbfbd32550cbefbf9c93e834a6dbe7659e2be547d9fbb9de8953e5cd3d03d198ab03ede6f2ebed016833d9c7d11bf2bcc253c2aa527be2214c7be5e7aac3e4e4194be5a687b3e86fd4e3ea2566abecafe81be43c3b1bdc5b8a73e5523cd3eaf2e763e69a890be0dbab93e66ffffff040000004000000053d6e23d66b6cc3e03e7f63ee02810bf000000003e3db03e0000000062f0773ea69da43e3a4bf3be719ea73e000000003439a23e00000000cc9c4a3eab40a33eb2ffffff0400000040000000b371673f9a7a95bfe148e8be8a72963e00d2d3bb1ac5d73fac7ec8be90a795be3bd7dcbe41a8163f505bcb3f52b9edbe2ea7c6beaf0f14bfb3da593f02ecd7be000006000800040006000000040000000400000066111fbfb8fbffff0f000000544f434f20436f6e7665727465642e0001000000100000000c001400040008000c0010000c000000f0000000e4000000d80000000400000003000000900000004800000004000000ceffffff00000008180000000c000000040000001cfcffff01000000000000000300000007000000080000000900000000000e001400000008000c00070010000e000000000000081c0000001000000004000000baffffff0000000101000000070000000300000004000000050000000600000000000e001600000008000c00070010000e0000000000000824000000180000000c00000000000600080007000600000000000001010000000400000003000000010000000200000003000000010000000000000001000000010000000a00000010030000a402000040020000f4010000ac01000048010000fc000000b4000000500000000400000026fdffff3c000000010000000c0000000400000018fdffff2000000073657175656e7469616c5f312f64656e73655f342f4d61744d756c5f626961730000000001000000010000006efdffff50000000020000000c0000000400000060fdffff3400000073657175656e7469616c5f312f64656e73655f342f4d61744d756c2f526561645661726961626c654f702f7472616e73706f736500000000020000000100000010000000cefdffff34000000080000000c00000004000000c0fdffff1900000073657175656e7469616c5f312f64656e73655f332f52656c7500000002000000010000001000000012feffff3c000000030000000c0000000400000004feffff2000000073657175656e7469616c5f312f64656e73655f332f4d61744d756c5f626961730000000001000000100000005afeffff50000000040000000c000000040000004cfeffff3400000073657175656e7469616c5f312f64656e73655f332f4d61744d756c2f526561645661726961626c654f702f7472616e73706f736500000000020000001000000010000000bafeffff340000000a0000000c00000004000000acfeffff1900000073657175656e7469616c5f312f64656e73655f322f52656c75000000020000000100000010000000fefeffff3c000000050000000c00000004000000f0feffff2000000073657175656e7469616c5f312f64656e73655f322f4d61744d756c5f6269617300000000010000001000000046ffffff50000000060000000c0000000400000038ffffff3400000073657175656e7469616c5f312f64656e73655f322f4d61744d756c2f526561645661726961626c654f702f7472616e73706f736500000000020000001000000001000000a6ffffff48000000090000002c0000000c00000008000c00040008000800000010000000040000000100000000007f4301000000000000000d00000064656e73655f325f696e70757400000002000000010000000100000000000e0014000400000008000c0010000e000000280000000700000010000000080000000400040004000000080000004964656e7469747900000000020000000100000001000000010000001000000000000a000c000700000008000a0000000000000903000000"

    result = fill_template_file(model_binary)

    expected_result = {
        "micro_mutable_ops_resolver": [
            "  // Only Pull in functions that are needed by the model",
            "  static tflite::MicroMutableOpResolver resolver;",
            "  resolver.AddBuiltin(tflite::BuiltinOperator_FULLY_CONNECTED, tflite::ops::micro::Register_FULLY_CONNECTED());",
        ],
        "micro_mutable_ops_resolver_header": [
            '#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"'
        ],
    }

    assert result == expected_result


def test_model_file():
    # Use a model file
    model_binary = parse_model_file(
        "../micro_speech/micro_features/tiny_conv_micro_features_model_data.cc",
        "g_tiny_conv_micro_features_model_data[]",
    )

    # use all fucntions
    result = fill_template_file(model_binary)

    expected_result = {
        "micro_mutable_ops_resolver": [
            "  // Only Pull in functions that are needed by the model",
            "  static tflite::MicroMutableOpResolver resolver;",
            "  resolver.AddBuiltin(tflite::BuiltinOperator_DEPTHWISE_CONV_2D, tflite::ops::micro::Register_DEPTHWISE_CONV_2D());",
            "  resolver.AddBuiltin(tflite::BuiltinOperator_FULLY_CONNECTED, tflite::ops::micro::Register_FULLY_CONNECTED());",
            "  resolver.AddBuiltin(tflite::BuiltinOperator_SOFTMAX, tflite::ops::micro::Register_SOFTMAX());",
        ],
        "micro_mutable_ops_resolver_header": [
            '#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"'
        ],
    }
    

    assert expected_result == result


def test_all_ops():

    result = fill_template_file()

    expected_result = {
        "micro_mutable_ops_resolver": [
            "// All functions are included in the library",
            " static tflite::ops::micro::AllOpsResolver resolver;",
        ],
        "micro_mutable_ops_resolver_header": [
            '#include "tensorflow/lite/micro/kernels/all_ops_resolver.h"'
        ],
    }

    assert result==expected_result

